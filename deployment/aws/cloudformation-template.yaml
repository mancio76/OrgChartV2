AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Organigramma Web App deployment on AWS ECS Fargate'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the deployment
  
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for ECS tasks
  
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs for load balancer
  
  DomainName:
    Type: String
    Description: Domain name for the application
    Default: organigramma.yourdomain.com
  
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for HTTPS
  
  ImageUri:
    Type: String
    Description: ECR image URI
    Default: ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/organigramma-web-app:latest

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: organigramma-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Application
          Value: organigramma-web-app

  # EFS File System for persistent storage
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      CreationToken: organigramma-efs
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: provisioned
      ProvisionedThroughputInMibps: 100
      FileSystemTags:
        - Key: Name
          Value: organigramma-efs
        - Key: Application
          Value: organigramma-web-app

  # EFS Mount Targets
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select [0, !Ref PrivateSubnetIds]
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select [1, !Ref PrivateSubnetIds]
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # EFS Access Points
  EFSAccessPointData:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        Path: /data
        CreationInfo:
          OwnerUid: 1000
          OwnerGid: 1000
          Permissions: 755
      AccessPointTags:
        - Key: Name
          Value: organigramma-data

  EFSAccessPointLogs:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        Path: /logs
        CreationInfo:
          OwnerUid: 1000
          OwnerGid: 1000
          Permissions: 755
      AccessPointTags:
        - Key: Name
          Value: organigramma-logs

  EFSAccessPointBackups:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        Path: /backups
        CreationInfo:
          OwnerUid: 1000
          OwnerGid: 1000
          Permissions: 755
      AccessPointTags:
        - Key: Name
          Value: organigramma-backups

  # Security Groups
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: organigramma-efs-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: organigramma-ecs-sg

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: organigramma-alb-sg

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: organigramma-alb
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Application
          Value: organigramma-web-app

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: organigramma-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Application
          Value: organigramma-web-app

  # ALB Listeners
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: organigramma-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref SecretKey
                  - !Ref AllowedHosts

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: organigramma-ecs-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: !Sub '${EFSFileSystem}/*'

  # Secrets Manager
  SecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: organigramma/secret-key
      Description: Secret key for Organigramma Web App
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: SECRET_KEY
        PasswordLength: 64
        ExcludeCharacters: '"@/\'

  AllowedHosts:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: organigramma/allowed-hosts
      Description: Allowed hosts for Organigramma Web App
      SecretString: !Sub '{"ALLOWED_HOSTS": "${DomainName}"}'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/organigramma-web-app
      RetentionInDays: 30

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: organigramma-web-app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: organigramma-app
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: SERVER_HOST
              Value: 0.0.0.0
            - Name: SERVER_PORT
              Value: '8000'
            - Name: DEBUG
              Value: 'false'
            - Name: WORKERS
              Value: '4'
            - Name: DATABASE_URL
              Value: sqlite:///data/orgchart.db
            - Name: DATABASE_ENABLE_FOREIGN_KEYS
              Value: 'true'
            - Name: DATABASE_BACKUP_ENABLED
              Value: 'true'
            - Name: LOG_LEVEL
              Value: WARNING
            - Name: LOG_TO_CONSOLE
              Value: 'true'
            - Name: LOG_TO_FILE
              Value: 'true'
            - Name: CSRF_PROTECTION
              Value: 'true'
            - Name: SECURE_COOKIES
              Value: 'true'
            - Name: HTTPS_ONLY
              Value: 'true'
          Secrets:
            - Name: SECRET_KEY
              ValueFrom: !Ref SecretKey
            - Name: ALLOWED_HOSTS
              ValueFrom: !Ref AllowedHosts
          MountPoints:
            - SourceVolume: organigramma-data
              ContainerPath: /app/data
              ReadOnly: false
            - SourceVolume: organigramma-logs
              ContainerPath: /var/log/orgchart
              ReadOnly: false
            - SourceVolume: organigramma-backups
              ContainerPath: /var/backups/orgchart
              ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8000/api/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Volumes:
        - Name: organigramma-data
          EFSVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPointData
        - Name: organigramma-logs
          EFSVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPointLogs
        - Name: organigramma-backups
          EFSVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPointBackups

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: organigramma-web-app
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 3
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: organigramma-app
          ContainerPort: 8000
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Application
          Value: organigramma-web-app
        - Key: Environment
          Value: production

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'
  
  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'
  
  EFSFileSystemId:
    Description: ID of the EFS file system
    Value: !Ref EFSFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-EFSFileSystem'